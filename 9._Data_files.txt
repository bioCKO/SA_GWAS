## Here can be found descriptions and code used to produce the data files uploaded to the zenodo repository
## The 'intermediate files' (e.g. "pheno.txt", as opposed to "Pheno_Data.txt") are not uploaded to zenodo; however, they are presented here for clarity, so that one can follow the main code (files 1-8) which makes use of these intermediate data files. 

dir <- "~/Desktop/PloS_Biol_revision/"

##############################
## Phenotype file
##############################

## This file contains (normalised, scaled and centred + averaged across blocks) male and female fitness values for each of 223 hemiclonal lines, as well as rotated phenotypic values (antagonism index and concordant index)
## It also contains some additional columns, which can be ignored (see below for details)
## Note that, for the purpose of the GWAS, some individuals were discarded due to relatively poor quality genomes, giving a total of N=202 individuals in the 'clean' dataset. The phenotypic values of these discarded individuals are nevertheless included in this table -- and indeed their phenotypic values were used to estimate h2 and rmf (see file 1).
## Columns 1 and 2 = names of individuals
## Column 3 = male fitness values
## Column 4 = female fitness values
## Column 5 and 6 = TO BE IGNORED
## Column 7 = concordant index
## Column 8 = antagonism index
## Columns 9 and 10 = TO BE IGNORED
## Fig 1A and S4A Fig can be reproduced using this dataframe
## See Text File #1 on github page for how to generate pheno.txt file

pheno <- read.table(paste0(dir,"pheno.txt"),head=T)
write.table(pheno,"Pheno_Data.txt",row.names=F,quote=F,sep="\t")

##############################
## PC Matrix file
##############################

## This file top 20 principal components, derived from overlapping SNPs found among LHm and DGRP datasets
## Pruned for r2 (LD<0.2) and MAF (>0.05)
## Columns 1 and 2 = individuals
## Columns 3-22 = PCs 1-20
## Column 23 = population
## Fig S1A can be reproduced using this dataframe
## See Text File #2 on github page for how to generate thin.vect file

thin <- read.table(paste0(dir,"thin.vect"))
thin$pop <- ifelse(thin$V1=="line","DGRP","LHM")
names(thin)[3:22] <- paste0("PC",as.numeric(substring(names(thin)[3:22],2))-2)
write.table(thin,paste0(dir,"PC_Data.txt"),row.names=F,quote=F,sep="\t")


##############################
## Relatedness matrix file
##############################

## This file contains pairwise kinships between all individuals retained for GWAS (N=202)
## Based on Genomic relationship matrix derived from LDAK, using MAF and LD weighting
## Columns = individuals
## Rows = individuals
## Fig S1B can be reproduced using this dataframe
## See Text File #3 on github page for how to generate kinsm_no_outlier.grm.raw file

kinsm <- read.table(paste0(dir,"kinsm_no_outlier.grm.raw"))
kinsm <- as.matrix(kinsm)
kinsm[lower.tri(kinsm,diag=TRUE)] <- NA
write.table(kinsm,paste0(dir,"Kinship_Data.txt"),quote=F,row.names=F,sep="\t")

##############################
## LD in LHm file
##############################

## This file contains mean r2 value in 25bp bins of distance
## LD calculated using 202 individuals retained for GWAS
## Column 1 = Maximum distance value of given distance bin
## Column 2 = mean r2 within given distance bin
## Fig S1C can be reproduced using this dataframe
## See Text File #3 on github page for how to generate ld_lhm_1m.ld file

ld_lhm <- read.table(paste0(dir,"ld_lhm_1m.ld"),head=T)
ld_lhm <- subset(ld_lhm,CHR_A!="CHR_A")
ld_lhm$Distance <- as.numeric(as.character(ld_lhm$BP_B))-as.numeric(as.character(ld_lhm$BP_A))
ld_lhm <- subset(ld_lhm,Distance<=1000)

ld_lhm$Distance_Bin <- cut(ld_lhm$Distance,breaks=seq(1,1000,25),labels=F)
ld_lhm_sum <- aggregate(ld_lhm[c("R2")],by=list(Distance_Bin=ld_lhm$Distance_Bin),mean,na.rm=T)
ld_lhm_sum$Distance_Bin <- ld_lhm_sum$Distance_Bin*25
names(ld_lhm_sum)[1] <- "Distance_Bin_Maximum_value"

write.table(ld_lhm_sum,paste0(dir,"LD_LHm_Data.txt"),quote=F,row.names=F,sep="\t")


##############################
## XvsA and VEP files
##############################

## This file contains estimated share of total heritability contributed by a given genomic partition
## Also includes expected share, CIs, and P value (computed parametrically for XvsA, computed empirically for VEP)
## Column 1 = Genomic partition (not named)
## Column 2 = Share of antagonistic SNP heritability (i.e. observed h2SNP for a given partition / total h2SNP across all partitions) estimated explained by given partition
## Column 3 = parametric SD for h2SNP share (only for X vs autosome comparison)
## Column 4 = parametric Expected h2SNP share (only for X vs autosome comparison)
## Column 5 = parametric h2SNP enrichment (only for X vs autosome comparison)
## Column 6 = parametric SD for enrichment in h2SNP (only for X vs autosome comparison)
## Column 7 = empirical 2.5% quantile of h2SNP share (only for VEP analysis)
## Column 8 = empirical 97.5% quantile of h2SNP share (only for VEP analysis)
## Column 9 = empirical mean h2SNP share (only for VEP analysis)
## Column 10 = p-values for a given partition (parametric for X vs autosome; empirical for VEP)
## Column 11 = Genomic partition (named)

## Fig 2 can be reproduced using this dataframe
## See Text File #5 on github page for how to generate XvsA.share, category.share and allperms.share files

XvsA_a <- read.table(paste0(dir,"XvsA.share"),head=T)
XvsA_a$q025 <- NA
XvsA_a$q975 <- NA
XvsA_a$mean <- NA
XvsA_a$pval <- 2*pnorm(-abs((1.924259-0.764754)/(sqrt(0.895479+0.227921))))
XvsA_a$Component2 <- c("Autosome","X")

#VEP
allperms <- read.table(paste0(dir,"allperms.share"),head=T)
allperms <- subset(allperms,Component!="Component")
allperms$Component <- factor(allperms$Component, levels=c("Share_K1","Share_K2","Share_K3","Share_K4","Share_K5","Share_K6","Share_K7","Share_K8","Share_K9","Share_K10"))
obs <- read.table(paste0(dir,"category.share"),head=T)

## Get means, quantiles and P-values for each VEP category
share <- list()
q025 <- list()
q975 <- list()
mean <- list()
pval <- list()
for (i in 1:10){
  share[[i]] <- as.numeric(as.character(subset(allperms,Component==levels(allperms$Component)[i])$Share))
  q025[[i]] <- quantile(share[[i]],0.025)
  q975[[i]] <- quantile(share[[i]],0.975)
  mean[[i]] <- mean(share[[i]])
  pval[[i]] <- sum(abs(share[[i]])>abs(obs$Share[i]))/1000
}
obs$q025 <- unlist(q025)
obs$q975 <- unlist(q975)
obs$mean <- unlist(mean)
obs$pval <- unlist(pval)
## Give partitions sensible names
obs$Component2 <-  factor(c("3' UTR","5' UTR","Downstream","Intergenic","Intron","Missense","Non-coding transcript exon","Splice region","Synonymous","Upstream"))
## Reorder factors for plot, so that annotations appear in alphabetical order
obs$Component2 <- factor(obs$Component2, levels=c("Upstream","Synonymous","Splice region","Non-coding transcript exon","Missense","Intron","Intergenic","Downstream","5' UTR","3' UTR"))
## Remove superfluous information
obs$SD <- NA
obs$Expected <- NA
obs$Enrichment <- NA
obs$SD.1 <- NA

## Combine XvsA and VEP dataframes
XvsA_VEP <- rbind(XvsA_a,obs)
write.table(XvsA_VEP,paste0(dir,"Genome_Partitioning_Data.txt"),row.names=F,sep="\t")

###########################################
## Association file + additional info
###########################################

## This file will probably be the most useful object for future users
## Broadly speaking, it contains the GWAS results + a number of additional columns
## Using this dataset, one can reproduce Figs 1B, 4A,C,E,G,I,K and 6A, as well as Figs S2, S3, S4, and S7.
## Column 1 = Predictor ID (Chrom_Pos format, with Chroms in plink format)
## Column 2 = Chromosome (standard format)
## Column 3 = Basepair (r6 coordinates)
## Columns 4 and 5 = Alternative alleles at given SNP position 
## Column 6 = Wald X2 statistic for the antagonism index
## Column 7 = Wald X2 P-value for the antagonism index
## Column 8 = Effect (regression coefficient) on the antagonism index
## Column 9 = Standard deviation
## Columns 10-14 = TO BE IGNORED
## Column 15 = Minor allele frequency in LHm
## Column 16 = FDR Q-value (Benjamini-Hochberg) for the antagonism index
## Column 17 = Plink-format chromosomes
## Column 18 = Variant consequence (based on 'most severe' setting in VEP)
## Column 19 = Wald-P value without correction for population structure
## Column 20 = Empirical P-value computed through 100,000 permutations
## Column 21 = FDR Q-value (Benjamini-Hochberg) on empirical P-values 
## Columns 22-23 = Is SNP a candidate? yes/no, with candidate status derived from 0.3 Q-value cut-off (for parametric) and minimum ~2,372 SNPs (for empirical)
## Columns 24-25 = Wald-P value and FDR Q-values for the concordant index
## Columns 26-27 = Are SNPs LD independent? yes/no, with two different distance thresholds (10kb and 1kb)
## Columns 28-29 = Chrom and Pos in r5 coordinates
## Column 30 = Starting position of 1000-bp window (in r5 coordinates) containing a given SNP
## Columns 31-32 = Linked selection value and recombination rate value for a given window
## Column 33 = LHm MAF, corrected for linked selection (on autosomes) and recombination rate (on the X chromosome)
## Column 34 = Number of alleles at a given position in the DGRP
## Column 35 = Coverage at a given position in the DGRP (note that these coverage values are double the actual values, because they assume diploid genomes when the vcf is processed)
## Columns 36-37 = Alleles 1 and 2 at a given position in the the DGRP
## Columns 38-39 = Allele frequencies of alleles 1 and 2 in the DGRP
## Column 40 = Minor allele frequency in the DGRP
## Columns 41-47 = Same as columns 34-40, but for DPGP3 (ZI) population
## Columns 48-54 = Same as columns 34-40 and 41-47, but for SA population
## Columns 55-57 = Binary variable specifying whether allelic identities in are the same as in LHm, presented for DGRP ZI and SA populations respectively
## Columns 58-60 = MAF columns, with low coverage (<20 sites) and tri-allelic sites removed, presented for DGRP ZI and SA populations respectively 
## Columns 61-63 = MAF columns, with low coverage (<20 sites) and tri-allelic sites removed, and MAF made zero if alleles differ from those found in LHm or if the site is monomorphic in a given population. Presented for DGRP ZI and SA populations respectively 
## Columns 64-72 = Similar nomenclature to Dmel population columns, but applied to Sarah Signor's dataset of 170 D. simulans genomes
## Columns 73-81 = Similar nomenclature to Dmel population columns, but applied to Rebekah Rogers's dataset of 20 D. simulans genomes
## Columns 82-90 = Similar nomenclature to Dmel population columns, but applied to Rebekah Rogers's dataset of 20 D. yakuba genomes


#Mixed model, using weighted kinship matrix as covariate
assoc <- read.table(paste0(dir,"mm.assoc"),head=T)
assoc$Chromosome <- as.factor(assoc$Chromosome)
levels(assoc$Chromosome) <- c("2L","2R","3L","3R","X")
assoc$fdr <- p.adjust(assoc$Wald_P,"BH")

#Include numeric column
assoc$Chromosome_numeric <- assoc$Chromosome
levels(assoc$Chromosome_numeric) <- 1:5
assoc$Chromosome_numeric <- as.numeric(as.character(assoc$Chromosome_numeric))

#Include VEP predictions
veps <- read.table(paste0(dir,"VEP_all_severe.txt"))
veps$Chromosome <- do.call(rbind,strsplit(as.character(veps$V1),split = "_"))[,1]
veps$Chromosome <- as.factor(veps$Chromosome)
veps$Basepair <- do.call(rbind,strsplit(as.character(veps$V1),split = "_"))[,2]
names(veps)[4] <- "Consequence"
assoc <- merge(assoc,veps[,c("Chromosome","Basepair","Consequence")],by=c("Chromosome","Basepair"),all.x=T)
assoc$Basepair <- as.numeric(as.character(assoc$Basepair))
assoc <- assoc[order(assoc$Chromosome,assoc$Basepair),]
rm(veps)

#Include P-values without correction for pop. structure
assoc.no.correction <- read.table(paste0(dir,"mm.no.correction.assoc"),head=T)
names(assoc.no.correction)[7] <- "Wald_P_no_kinsm_correction"
assoc <- merge(assoc,assoc.no.correction[,c("Predictor","Wald_P_no_kinsm_correction")],by=c("Predictor"),all.x=T)
assoc <- assoc[order(assoc$Chromosome,assoc$Basepair),]
rm(assoc.no.correction)

#Include P-values from permutation-based approach
empirical_p_filip <- read.table(paste0(dir,"Empirical_p_all"))
empirical_p_filip$all <- rowSums(empirical_p_filip[,1:100])*1000
empirical_p_filip$Pval <- (empirical_p_filip$all+1)/100001
empirical_p_filip$fdr <- p.adjust(empirical_p_filip$Pval,"BH")
assoc$Empirical_p_100k <- empirical_p_filip$Pval
assoc$fdr.Empirical_p_100k <- empirical_p_filip$fdr
assoc$Cand_parametric <- ifelse(p.adjust(assoc$Wald_P,"BH")<0.3,1,0)
assoc$Cand_empirical <- ifelse(assoc$Empirical_p_100k<sort(assoc$Empirical_p_100k)[2372],1,0)
rm(empirical_p_filip)

#Include concordant P- and Q-values
cassoc <- read.table(paste0(dir,"conc.assoc"),head=T)
cassoc$Chromosome <- as.factor(cassoc$Chromosome)
levels(cassoc$Chromosome) <- c("2L","2R","3L","3R","X")
cassoc$fdr <- p.adjust(cassoc$Wald_P,"BH")
assoc$Wald_P_concordant <- cassoc$Wald_P
assoc$fdr_concordant <- cassoc$fdr
rm(cassoc)

#Include info on whether SNP is 'LD-independent', using 10Kb and 1Kb clumping thresholds
matched_pred <- read.table(paste0(dir,"clumped_r0.4_10kb.clumped"),head=T)
names(matched_pred)[3] <- "Predictor"
assoc$LD_indep_r2_0.4_10Kb <- ifelse(assoc$Predictor %in% matched_pred$Predictor,1,0)

matched_pred <- read.table(paste0(dir,"clumped_r0.4_1kb.clumped"),head=T)
names(matched_pred)[3] <- "Predictor"
assoc$LD_indep_r2_0.4_1Kb <- ifelse(assoc$Predictor %in% matched_pred$Predictor,1,0)

#Include info on linked selection and r5 chromosome coordinates
GWAS.pos <- read.table(paste0(dir,"GWAS_positions.r5.txt"))
names(GWAS.pos) <- c("Chrom.r5","Pos.r5","Chrom.r6","Pos.r6")
GWAS.pos$Chrom_plink <- GWAS.pos$Chrom.r6
levels(GWAS.pos$Chrom_plink) <- 1:5
GWAS.pos$Predictor <- paste(GWAS.pos$Chrom_plink,GWAS.pos$Pos.r6,sep="_")
ls <- read.table(paste0(dir,"LS_map_all_chrom_r5_and_r6.txt"),head=T)
rr <- read.table(paste0(dir,"recom_all_chrom_r5_and_r6.txt"),head=T)
GWAS.pos$BIN_START <- cut(GWAS.pos$Pos.r5,breaks=levels(factor(ls$BIN_START)),include.lowest = T,labels=F,right=F)
GWAS.pos$BIN_START <- GWAS.pos$BIN_START-1
GWAS.pos$BIN_START <- GWAS.pos$BIN_START*1000
GWAS.pos$BIN_START<- GWAS.pos$BIN_START+1
names(GWAS.pos)[1:2] <- c("Chrom","Pos")
GWAS.pos <- Reduce(function(...) merge(...,by=c("Chrom","BIN_START"),all.x=T),list(GWAS.pos,ls[c("Chrom","BIN_START","LS")],rr[c("Chrom","BIN_START","RR")]))
names(GWAS.pos)[c(1,3)] <- c("Chrom.r5","Pos.r5")
assoc <- merge(assoc,GWAS.pos[c("Predictor","Chrom.r5","Pos.r5","BIN_START","LS","RR")],by="Predictor",all.x=T)

#Include residual MAF
assoc$MAF.resid[!is.na(assoc$LS) & assoc$Chromosome!="X"] <- glm(data=subset(assoc,!is.na(LS) & Chromosome!="X"),MAF~LS)$residuals
assoc$MAF.resid[!is.na(assoc$RR) & assoc$Chromosome=="X"] <- glm(data=subset(assoc,!is.na(RR) & Chromosome=="X"),MAF~RR)$residuals

#Include MAFs in DGRP, ZI and SA 
dgrp.frq <- read.table(paste0(dir,"dgrp.no.dp.filter.plus.mono.all.frq"),head=T)
names(dgrp.frq)[3:8] <- c("N_alleles_DGRP","N_chrom_DGRP","A1_DGRP","A2_DGRP","A1_freq_DGRP","A2_freq_DGRP")
dpgp3.frq <- read.table(paste0(dir,"dpgp3.no.dp.filter.plus.mono.all.frq"),head=T)
names(dpgp3.frq)[3:8] <- c("N_alleles_DPGP3","N_chrom_DPGP3","A1_DPGP3","A2_DPGP3","A1_freq_DPGP3","A2_freq_DPGP3")
sa.frq <- read.table(paste0(dir,"sa.no.dp.filter.plus.mono.all.frq"),head=T)
names(sa.frq)[3:8] <- c("N_alleles_SA","N_chrom_SA","A1_SA","A2_SA","A1_freq_SA","A2_freq_SA")
assoc <- Reduce(function(...) merge(...,all.x=T,by=c("Predictor")),list(assoc,dgrp.frq[c("N_alleles_DGRP","N_chrom_DGRP","A1_DGRP","A2_DGRP","A1_freq_DGRP","A2_freq_DGRP","MAF_DGRP","Predictor")],dpgp3.frq[c("N_alleles_DPGP3","N_chrom_DPGP3","A1_DPGP3","A2_DPGP3","A1_freq_DPGP3","A2_freq_DPGP3","MAF_DPGP3","Predictor")],sa.frq[c("N_alleles_SA","N_chrom_SA","A1_SA","A2_SA","A1_freq_SA","A2_freq_SA","MAF_SA","Predictor")]))
#Are bi-allelic SNPs the same in LHM and comparison population?
assoc$Same_alleles_LHm_DGRP <- with(assoc,ifelse((A1==A1_DGRP | A1==A2_DGRP) & (A2==A2_DGRP | A2==A1_DGRP),1,0))
assoc$Same_alleles_LHm_DPGP3 <- with(assoc,ifelse((A1==A1_DPGP3 | A1==A2_DPGP3) & (A2==A2_DPGP3 | A2==A1_DPGP3),1,0))
assoc$Same_alleles_LHm_SA <- with(assoc,ifelse((A1==A1_SA | A1==A2_SA) & (A2==A2_SA | A2==A1_SA),1,0))
#Remove low depth and tri-allelic sites
assoc$MAF_DGRP_filt <- ifelse(assoc$N_chrom_DGRP<40 | assoc$N_alleles_DGRP==3,NA,assoc$MAF_DGRP)
assoc$MAF_DPGP3_filt <- ifelse(assoc$N_chrom_DPGP3<40 | assoc$N_alleles_DPGP3==3,NA,assoc$MAF_DPGP3)
assoc$MAF_SA_filt <- ifelse(assoc$N_chrom_SA<40 | assoc$N_alleles_SA==3,NA,assoc$MAF_SA)
#If bi-allelic, different alleles and good depth, or mono-allelic and good depth, make MAF=0
assoc$MAF_DGRP_incl_mono <- ifelse(((assoc$N_alleles_DGRP==1) | (assoc$N_alleles_DGRP==2 & assoc$Same_alleles_LHm_DGRP==0)) & assoc$N_chrom_DGRP>39,0,assoc$MAF_DGRP_filt)
assoc$MAF_DPGP3_incl_mono <- ifelse(((assoc$N_alleles_DPGP3==1) | (assoc$N_alleles_DPGP3==2 & assoc$Same_alleles_LHm_DPGP3==0)) & assoc$N_chrom_DPGP3>39,0,assoc$MAF_DPGP3_filt)
assoc$MAF_SA_incl_mono <- ifelse(((assoc$N_alleles_SA==1) | (assoc$N_alleles_SA==2 & assoc$Same_alleles_LHm_SA==0)) & assoc$N_chrom_SA>39,0,assoc$MAF_SA_filt)
rm(dgrp.frq)
rm(dpgp3.frq)
rm(sa.frq)

#Include MAFs in Dsim (Signor), Dsim (Rogers), Dyak (Rogers) 
#Dsim Signor dataset
sim.frq3 <- read.table(paste0(dir,"sim.frq3.txt"),head=T)
assoc <- merge(assoc,sim.frq3[c("Predictor","N_alleles_Dsim_Signor","N_chrom_Dsim_Signor","A1_Dsim_Signor","A2_Dsim_Signor","A1_freq_Dsim_Signor","A2_freq_Dsim_Signor","MAF_Dsim_Signor")],by="Predictor",all.x=T)
assoc$Same_alleles_LHm_Dsim_Signor <- with(assoc,ifelse((as.character(A1)==as.character(A1_Dsim_Signor) | as.character(A1)==as.character(A2_Dsim_Signor)) & (as.character(A2)==as.character(A2_Dsim_Signor) | as.character(A2)==as.character(A1_Dsim_Signor)),1,0))
assoc$is.transspecific_Dsim_Signor <- ifelse(is.na(assoc$Same_alleles_LHm_Dsim_Signor) | assoc$Same_alleles_LHm_Dsim_Signor==0,0,1)
rm(sim.frq3)

#Dsim Rogers dataset
sim.rog2 <- read.table(paste0(dir,"sim.rog2.txt"),head=T)
#merge simulans and association information
assoc <- merge(assoc,sim.rog2[c("Predictor","is.poly_Dsim_Rogers","depth_Dsim_Rogers", "A1_Dsim_Rogers", "A2_Dsim_Rogers", "AF_Dsim_Rogers","MAF_Dsim_Rogers")],by="Predictor",all.x=T)
assoc$Same_alleles_LHm_Dsim_Rogers <- with(assoc,ifelse((as.character(A1)==as.character(A1_Dsim_Rogers) | as.character(A1)==as.character(A2_Dsim_Rogers)) & (as.character(A2)==as.character(A2_Dsim_Rogers) | as.character(A2)==as.character(A1_Dsim_Rogers)),1,0))
assoc$is.transspecific_Dsim_Rogers <- ifelse(assoc$is.poly_Dsim_Rogers==1 & assoc$Same_alleles_LHm_Dsim_Rogers==1,1,0)
rm(sim.rog2)

#Dyak Rogers dataset
yak.rog2 <- read.table(paste0(dir,"yak.rog2.txt"),head=T)
#merge simulans and association information
assoc <- merge(assoc,yak.rog2[c("Predictor","is.poly_Dyak_Rogers","depth_Dyak_Rogers", "A1_Dyak_Rogers", "A2_Dyak_Rogers", "AF_Dyak_Rogers","MAF_Dyak_Rogers")],by="Predictor",all.x=T)
assoc$Same_alleles_LHm_Dyak_Rogers <- with(assoc,ifelse((as.character(A1)==as.character(A1_Dyak_Rogers) | as.character(A1)==as.character(A2_Dyak_Rogers)) & (as.character(A2)==as.character(A2_Dyak_Rogers) | as.character(A2)==as.character(A1_Dyak_Rogers)),1,0))
assoc$is.transspecific_Dyak_Rogers <- ifelse(assoc$is.poly_Dyak_Rogers==1 & assoc$Same_alleles_LHm_Dyak_Rogers==1,1,0)
rm(yak.rog2)

assoc <- assoc[order(assoc$Chromosome,assoc$Basepair),]
write.table(assoc,paste0(dir,"Assoc_Data.txt"),quote=F,row.names=F,sep="\t")

############################################################
## SNP-based balancing selection file; 'Analysis A' in Dmel
############################################################

## This file contains the mean MAFs for 1000 simulated sets of non-antagonistic SNPs in the DGRP, ZI and SA populations
## Using this dataset, one can reproduce Fig 4B,F,J.
## Column 1 = Simulation run
## Columns 2-4 = Mean simulated MAF for non-antagonistic SNPs in the DGRP, ZI and SA pops respectively
## The last row contains the mean MAF for antagonistic SNPs in all three populations

match_sum.threepops <- cbind(match_sum.dgrp,match_sum.dpgp3[2],match_sum.sa[2])
match_sum.threepops[1001,] <- c("Antagonistic",obs_mean.dgrp,obs_mean.dpgp3,obs_mean.sa)
write.table(match_sum.threepops,paste0(dir,"Matched_Analysis_DGRP_ZI_SA_Data.txt"),quote=F,row.names = F,sep="\t")

############################################################
## SNP-based balancing selection file; 'Analysis C' in Dmel
############################################################

## This file contains the mean MAFs in the DGRP, ZI and SA populations, presented for 100 quantiles of Absolute Effect size
## In each quantile of effect size, the MAFs have also been matched to LHM MAFs by drawing from 20 quantiles of LHM MAF
## Using this dataset, one can reproduce Fig 4D,H,L.
## Column 1 = MAF
## Column 2 = Mean sampled effect size in given quantile of absolute effect size
## Column 3 = Population ID
## Column 4 = Quantile ID

## Import datasets
indep_sum.dgrp$Pop <- "DGRP"
names(indep_sum.dgrp)[c(1:2)] <- c("MAF","MAF_LHm.resid")
indep_sum.dpgp3$Pop <- "ZI"
names(indep_sum.dpgp3)[c(1:2)] <- c("MAF","MAF_LHm.resid")
indep_sum.sa$Pop <- "SA"
names(indep_sum.sa)[c(1:2)] <- c("MAF","MAF_LHm.resid")

indep_sum.threepops <- rbind(indep_sum.dgrp[c(1,3,5)],indep_sum.dpgp3[c(1,3,5)],indep_sum.sa[c(1,3,5)])
indep_sum.threepops$Abs_Effect_quantile <- rep(1:100,3)
write.table(indep_sum.threepops,paste0(dir,"Indep_Analysis_DGRP_ZI_SA_Data.txt"),quote=F,row.names = F,sep="\t")


################################
## Sliding windows analyses file
##############################

## This file contains sliding windows analysis data used in Fig 5A,B of manuscript
## Column 1 = Chromosome of given window (r6 coordinates)
## Column 2 = Starting position of given window (r6 coordinates)
## Columns 3-7 = Heritability, SD, Null Likelihood, Alternative likelihood and Likelihood Ratio Test statistic of given window (these columns are not used in further analyses)
## Column 8 = LRT P-value for given window (note that the distribution under the null is not uniform, because there is a 50% chance that the best fitting variance of a window is negative, in which case the P-value is undefined. P-values have therefore been adjusted so that the mean P-value under the null is 50%).
## Column 9 = Benjamini-Hochberg Q-value for given window
## Column 10 = Chromosome of given window (r5 coordinates)
## Column 11 = Starting position of given window (r5 coordinates)
## Column 12 = Linked selection value of given window (from Elyashiv et al. 2016)
## Column 13 = Recombination rate value of given window (from Comeron et al. 2012)
## Columns 14-16 = Tajima's D of given window for DGRP, ZI and SA populations
## Columns 17-19 = Fst of given window for DGRP-ZI, SA-ZI and DGRP-SA population pairs (RAL=DGRP)
## Column 20 = Binary Candidate/non-Candidate window status
## Columns 21-23 = Residual Tajima's of given window for DGRP, ZI and SA populations
## Columns 24-26 = Residual Fst of given window for DGRP-ZI, SA-ZI and DGRP-SA population paors

## Combine information
cbat <- Reduce(function(...) merge(...,by=c("Chrom.r6","BIN_START.r6"),all.x=T),list(cbat,chunks[c("Chrom.r6","BIN_START.r6","Chrom.r5","BIN_START.r5")],ls[c("Chrom.r6","BIN_START.r6","LS")],rr[c("Chrom.r6","BIN_START.r6","RR")],stats.all.DGRP[,c("Chrom.r6","BIN_START.r6","Tajima.D_DGRP")],stats.all.DPGP3[,c("Chrom.r6","BIN_START.r6","Tajima.D_DPGP3")],stats.all.SA[,c("Chrom.r6","BIN_START.r6","Tajima.D_SA")],fst.stats[,c("Chrom.r6","BIN_START.r6","RAL.ZI","SA.ZI","RAL.SA")]))

## Define antagonistic window
cbat$Candidate <- ifelse(cbat$fdr<0.1,1,0)

## Clean up
names(cbat)[23:25] <- c("Fst_RAL.ZI","Fst_SA.ZI","Fst_RAL.SA")
cbat <- cbat[order(cbat$Chrom.r6,cbat$BIN_START.r6),]
cbat <- cbat[c(1:2,6:10,12,15:26)]

## Add residual columns for Taj D
cbat$Tajima.D_DGRP.resid[!is.na(cbat$LS) & !is.na(cbat$Tajima.D_DGRP) & !is.na(cbat$Candidate)] <- glm(data=cbat[!is.na(cbat$LS) & !is.na(cbat$Tajima.D_DGRP) & !is.na(cbat$Candidate),],Tajima.D_DGRP~LS)$residuals
cbat$Tajima.D_DGRP.resid[!is.na(cbat$RR) & !is.na(cbat$Tajima.D_DGRP) & !is.na(cbat$Candidate) & cbat$Chrom.r6=="X"] <- glm(data=cbat[!is.na(cbat$RR) & !is.na(cbat$Tajima.D_DGRP) & !is.na(cbat$Candidate) & cbat$Chrom.r6=="X",],Tajima.D_DGRP~RR)$residuals
cbat$Tajima.D_DPGP3.resid[!is.na(cbat$LS) & !is.na(cbat$Tajima.D_DPGP3) & !is.na(cbat$Candidate)] <- glm(data=cbat[!is.na(cbat$LS) & !is.na(cbat$Tajima.D_DPGP3) & !is.na(cbat$Candidate),],Tajima.D_DPGP3~LS)$residuals
cbat$Tajima.D_DPGP3.resid[!is.na(cbat$RR) & !is.na(cbat$Tajima.D_DPGP3) & !is.na(cbat$Candidate) & cbat$Chrom.r6=="X"] <- glm(data=cbat[!is.na(cbat$RR) & !is.na(cbat$Tajima.D_DPGP3) & !is.na(cbat$Candidate) & cbat$Chrom.r6=="X",],Tajima.D_DPGP3~RR)$residuals
cbat$Tajima.D_SA.resid[!is.na(cbat$LS) & !is.na(cbat$Tajima.D_SA) & !is.na(cbat$Candidate)] <- glm(data=cbat[!is.na(cbat$LS) & !is.na(cbat$Tajima.D_SA) & !is.na(cbat$Candidate),],Tajima.D_SA~LS)$residuals
cbat$Tajima.D_SA.resid[!is.na(cbat$RR) & !is.na(cbat$Tajima.D_SA) & !is.na(cbat$Candidate) & cbat$Chrom.r6=="X"] <- glm(data=cbat[!is.na(cbat$RR) & !is.na(cbat$Tajima.D_SA) & !is.na(cbat$Candidate) & cbat$Chrom.r6=="X",],Tajima.D_SA~RR)$residuals

## Add residual columns for Fst
cbat$Fst_RAL.SA.resid[!is.na(cbat$LS) & !is.na(cbat$Fst_RAL.SA) & !is.na(cbat$Candidate)] <- glm(data=cbat[!is.na(cbat$LS) & !is.na(cbat$Fst_RAL.SA) & !is.na(cbat$Candidate),],Fst_RAL.SA~LS)$residuals
cbat$Fst_RAL.SA.resid[!is.na(cbat$RR) & !is.na(cbat$Fst_RAL.SA) & !is.na(cbat$Candidate) & cbat$Chrom.r6=="X"] <- glm(data=cbat[!is.na(cbat$RR) & !is.na(cbat$Fst_RAL.SA) & !is.na(cbat$Candidate) & cbat$Chrom.r6=="X",],Fst_RAL.SA~RR)$residuals
cbat$Fst_RAL.ZI.resid[!is.na(cbat$LS) & !is.na(cbat$Fst_RAL.ZI) & !is.na(cbat$Candidate)] <- glm(data=cbat[!is.na(cbat$LS) & !is.na(cbat$Fst_RAL.ZI) & !is.na(cbat$Candidate),],Fst_RAL.ZI~LS)$residuals
cbat$Fst_RAL.ZI.resid[!is.na(cbat$RR) & !is.na(cbat$Fst_RAL.ZI) & !is.na(cbat$Candidate) & cbat$Chrom.r6=="X"] <- glm(data=cbat[!is.na(cbat$RR) & !is.na(cbat$Fst_RAL.ZI) & !is.na(cbat$Candidate) & cbat$Chrom.r6=="X",],Fst_RAL.ZI~RR)$residuals
cbat$Fst_SA.ZI.resid[!is.na(cbat$LS) & !is.na(cbat$Fst_SA.ZI) & !is.na(cbat$Candidate)] <- glm(data=cbat[!is.na(cbat$LS) & !is.na(cbat$Fst_SA.ZI) & !is.na(cbat$Candidate),],Fst_SA.ZI~LS)$residuals
cbat$Fst_SA.ZI.resid[!is.na(cbat$RR) & !is.na(cbat$Fst_SA.ZI) & !is.na(cbat$Candidate) & cbat$Chrom.r6=="X"] <- glm(data=cbat[!is.na(cbat$RR) & !is.na(cbat$Fst_SA.ZI) & !is.na(cbat$Candidate) & cbat$Chrom.r6=="X",],Fst_SA.ZI~RR)$residuals

write.table(cbat,paste0(dir,"Sliding_Windows_Data.txt"),quote=F,row.names=F,sep="\t")

##############################
## LD file, ZI
##############################

## This file contains r2 values between pairs of sites within 1000bp, binned and averaged into 25 bp bins of distance, and split by the type of site
## Using this file, one can reproduce Fig 5C of the manuscript
## Column 1 = Maximum value of given distance bin
## Column 2 = Type of SNP pair used to compute r2 values (either pairs of antag, pairs of control, or antag/control pairs)
## Column 3 = Mean R2 value for given distance bin and given SNP pair type

Cand <- subset(assoc,fdr<0.3)$Predictor

ld_dpgp3 <- read.table(paste0(dir,"ld_dpgp3_all.ld"),head=T)
ld_dpgp3 <- subset(ld_dpgp3,CHR_A!="CHR_A")
ld_dpgp3$Distance <- as.numeric(as.character(ld_dpgp3$BP_B))-as.numeric(as.character(ld_dpgp3$BP_A))
ld_dpgp3 <- subset(ld_dpgp3,Distance<=1000)
ld_dpgp3$SNP_A_Type <- ifelse(ld_dpgp3$SNP_A %in% Cand,"Cand","NonCand")
ld_dpgp3$SNP_B_Type <- ifelse(ld_dpgp3$SNP_B %in% Cand,"Cand","NonCand")
ld_dpgp3$Type <- paste(ld_dpgp3$SNP_A_Type,ld_dpgp3$SNP_B_Type,sep="_")
ld_dpgp3$Type[ld_dpgp3$Type=="NonCand_Cand"] <- "Cand_NonCand"
ld_dpgp3$R2 <- as.numeric(as.character(ld_dpgp3$R2))
ld_dpgp3$Distance_Bin <- cut(ld_dpgp3$Distance,breaks=seq(1,1000,25),labels=F)

ld_dpgp3_sum <- aggregate(ld_dpgp3[c("R2")],by=list(Distance_Bin=ld_dpgp3$Distance_Bin,Type=ld_dpgp3$Type),mean,na.rm=T)
ld_dpgp3_sum$Type <- factor(ld_dpgp3_sum$Type)
levels(ld_dpgp3_sum$Type) <- c("Antag./antag.","Antag./control", "Control/\ncontrol.")
ld_dpgp3_sum$Distance_Bin <- ld_dpgp3_sum$Distance_Bin*25
names(ld_dpgp3_sum)[1] <- "Distance_Bin_Maximum_value"

write.table(ld_dpgp3_sum,paste0(dir,"LD_ZI_Data.txt"),quote=F,row.names=F,sep="\t")

############################################################
## SNP-based balancing selection file; 'Analysis A' in Dsim/Dyak 
############################################################

## This dataframe follows the same format as the 'Matched_Analysis_DGRP_ZI_SA_Data' presented for the DGRP, ZI and SA populations, except that it is applied to the three non-melanogaster datasets
## Using this dataset, one can reproduce Fig 6B-D.
## Column 1 = Simulation run
## Columns 2-4 = Mean proportion of non-antagonistic trans-specific SNPs in Dsim (Signor), Dsim (Rogers) and Dyak (Rogers), presented for each of 1000 simulation runs
## The last row contains the mean proportion of trans-specific antagonistic SNPs in all three datasets

match_sum.threepops <- cbind(match_sum.Dsim_Signor,match_sum.Dsim_Rogers[2],match_sum.Dyak_Rogers[2])
match_sum.threepops[1001,] <- c("Antagonistic",obs_mean.Dsim_Signor,obs_mean.Dsim_Rogers,obs_mean.Dyak_Rogers)
write.table(match_sum.threepops,paste0(dir,"Matched_Analysis_Dsim_Signor_Dsim_Rogers_Dyak_Rogers_Data.txt"),quote=F,row.names = F,sep="\t")
