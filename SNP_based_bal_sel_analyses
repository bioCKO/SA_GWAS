----- R code -----
library(Rmisc)
library(Hmisc)
library(matrixStats)
library(ggplot2)
library(gplots)
library(data.table)

######################################################
## RECOMBINATION RATE & LINKED SELECTION
######################################################

###### Define windows in r6 coordinates ######

#set chromosome length of longest chromosome
l_2L     <- 23011544;
l_2R     <- 21146708;
l_3L     <- 24543557;
l_3R     <- 27905053;
l_X      <- 22422827;
bins.1k.2L <- as.data.frame( seq(1, l_2L-1000, by=500) ,nm="Pos");
bins.1k.2L$Chrom <- "2L"
bins.1k.2R <- as.data.frame( seq(1, l_2R-1000, by=500) ,nm="Pos");
bins.1k.2R$Chrom <- "2R"
bins.1k.3L <- as.data.frame( seq(1, l_3L-1000, by=500) ,nm="Pos");
bins.1k.3L$Chrom <- "3L"
bins.1k.3R <- as.data.frame( seq(1, l_3R-1000, by=500) ,nm="Pos");
bins.1k.3R$Chrom <- "3R"
bins.1k.X <- as.data.frame( seq(1, l_X-1000, by=500) ,nm="Pos");
bins.1k.X$Chrom <- "X"
bins.1k <- rbind(bins.1k.2L,bins.1k.2R,bins.1k.3L,bins.1k.3R,bins.1k.X)
bins.1k <- bins.1k[,c(2,1)]
write.table(bins.1k,"~/Documents/data/pop_gen/coord_conversion/window_start_end.txt",quote=F,row.names=F,col.names=F)

#Convert r5 chunks to r6 chunks
coordinate_conversion_function_part1 <- function(infile_path,chrom,outfile_path){
  infile <- read.table(infile_path)
  infile$V1 <- chrom
  names(infile) <- c("Chrom","Pos")
  #remove scientific notation
  infile <- format(infile,scientific=F)
  options(scipen=999)
  #vcf is 1-based; genome conversion requires 0-based data
  infile$Pos <- as.numeric(infile$Pos)-1
  infile$Pos2 <- as.numeric(infile$Pos)+1
  #make BED-like column 
  infile$V4 <- paste(infile$Chrom,infile$Pos,sep=":")
  infile$V5 <- paste(infile$V4,infile$Pos2,sep="-")
  infile$V6 <- paste("chr",infile$V5,sep="")
  outfile <- as.data.frame(infile[,6])
  rm(infile)
  write.table(outfile,outfile_path,quote=F,col.names=F,row.names=F)}
  
coordinate_conversion_function_part2 <- function(original_path,converted_path,error_path,chrom,outfile_path){
  original.bed <- read.table(original_path)
  converted.bed <- read.table(converted_path)
  if(file.exists(error_path)){
    error.bed <- read.table(error_path)
    #merge original and converted, in bed format
    error.bed$error <- TRUE
    original.bed$names <- rownames(original.bed)
    names(original.bed)[1] <- "V1"
    tmp1 <- merge(error.bed,original.bed,by="V1",all.y=T)
    tmp1$names <- as.numeric(tmp1$names)
    #order by original rowname
    tmp1 <- tmp1[order(tmp1$names),]
    #remove erroneous positions from r5 coords
    tmp2 <- subset(tmp1,is.na(error))
    #attach new coords to old coords 
    original_and_converted <- cbind(tmp2$V1,converted.bed)
    names(original_and_converted)[c(1,2)] <- c("r5","r6")
  }else{
    original_and_converted <- cbind(original.bed[1],converted.bed)
    names(original_and_converted)[c(1,2)] <- c("r5","r6")
  }
  
  #bed -> vcf
  #r5
  tmp.r5 <- as.data.frame(cbind(do.call(rbind,strsplit(as.character(original_and_converted$r5),split=":"))[,1],do.call(rbind,strsplit(as.character(original_and_converted$r5),split="-"))[,2]))
  tmp.r5$V1 <- substring(tmp.r5$V1, 4)
  names(tmp.r5) <- c("Chrom","Pos")
  tmp.r5$Chrom <- as.factor(tmp.r5$Chrom)
  tmp.r5$Pos <- as.numeric(as.character(tmp.r5$Pos))
  #r6
  tmp.r6 <- as.data.frame(cbind(do.call(rbind,strsplit(as.character(original_and_converted$r6),split=":"))[,1],do.call(rbind,strsplit(as.character(original_and_converted$r6),split="-"))[,2]))
  tmp.r6$V1 <- substring(tmp.r6$V1, 4)
  names(tmp.r6) <- c("Chrom.r6","Pos.r6")
  tmp.r6$Chrom.r6 <- as.factor(tmp.r6$Chrom.r6)
  tmp.r6$Pos.r6 <- as.numeric(as.character(tmp.r6$Pos.r6))
  #merge well-formatted new/old coords
  outfile <- cbind(tmp.r5,tmp.r6)
  
  #write out bad loci positions
  error <- as.data.frame(cbind(do.call(rbind,strsplit(as.character(error.bed$V1),split=":"))[,1],do.call(rbind,strsplit(as.character(error.bed$V1),split="-"))[,2]))
  if(file.exists(error_path) & nrow(error)>0){
    error$V1 <- substring(error$V1, 4)
    names(error) <- c("Chrom","Pos")
    error$Chrom <- as.factor(error$Chrom)
    error$Pos <- as.numeric(as.character(error$Pos))
    error <- rbind(error,outfile[outfile$Chrom.r6!=chrom,1:2])
    error$Chrom <- 1
    write.table(error,paste(outfile_path,chrom,"badloci.txt",sep=""),row.names=F,quote=F,col.names=F,sep="\t")}
  
  #write out additional bad loci positions
  error2 <- outfile[outfile$Chrom.r6!=chrom,]
  if(file.exists(error_path) & nrow(error2)>0){
    error2$Chrom <- 1
    write.table(error2[,1:2],paste(outfile_path,chrom,"additionalbadloci.txt",sep=""),row.names=F,quote=F,col.names=F,sep="\t")}
  
  #write out r6 positions
  outfile <- outfile[outfile$Chrom.r6==chrom,]
  outfile$Chrom.r6 <- 1
  write.table(outfile[,3:4],paste(outfile_path,chrom,"new_coords.txt",sep=""),row.names=F,quote=F,col.names=F,sep="\t")
}

#p1
infile_path <- "~/Documents/data/pop_gen/coord_conversion/window_start_end.txt"
outfile_path <- "~/Documents/data/pop_gen/coord_conversion/window_start_end.bed"
coordinate_conversion_function_part1(infile_path,outfile_path)

#p2
original_path <- "~/Documents/data/pop_gen/coord_conversion/window_start_end.bed"
converted_path <- "~/Documents/data/pop_gen/coord_conversion/hglft_window.bed"
error_path <- "~/Documents/data/pop_gen/coord_conversion/hglft_window.err.txt"
outfile_path <- "~/Documents/data/pop_gen/coord_conversion/window_start_end_r5_r6.txt"
coordinate_conversion_function_part2(original_path,converted_path,error_path,outfile_path)

## Import windows that have been coordinate converted

chunks <- read.table("~/Documents/data/pop_gen/coord_conversion/window_start_end_r5_r6.txt")
chunks$Predictor <- paste(chunks$V4,chunks$V5,sep = "_")
names(chunks) <- c("Chrom.r5","BIN_START.r5","BIN_END.r5","Chrom.r6","BIN_START.r6","BIN_END.r6","Predictor")

#Make chunk file that is suitable for LDAK's gene-based test
chunks_r5 <- chunks[4:7]
levels(chunks_r5$Chrom.r6) <- 1:5
chunks_r5 <- chunks_r5[order(chunks_r5$Chrom.r6,chunks_r5$BIN_START.r6),]
#write.table(chunks_r5[c(4,1,2,3)],"~/Documents/data/GWAS_data/gwas/callrate95_no_outlier/chunks_r5_v2.txt",quote=F,row.names=F,col.names=F)

###### Linked selection values ######

#ls <- read.table("Documents/data/pop_gen/recombination_rate_linked_selection/LS_map_all_chrom.txt",head=T)
#ls <- merge(ls,chunks,by.x=c("Chrom","BIN_START"),by.y=c("Chrom.r5","BIN_START.r5"),all.x=T)

#write.table(ls,"Documents/data/pop_gen/recombination_rate_linked_selection/LS_map_all_chrom_r5_and_r6.txt",quote=F,row.names=F)

ls <- read.table("Documents/data/pop_gen/recombination_rate_linked_selection/LS_map_all_chrom_r5_and_r6.txt",header = T)

###### Recombination rate values ######

#Merge new and old coordinates with LS values
rr <- read.table("Documents/data/pop_gen/recombination_rate_linked_selection/Comeron_tables/recom_all_chrom.txt",head=T)

#split rr dataframe into 1000k bins
l     <- 27900001;
win <- 1000;
step   <- 500;
bins.1k <- as.data.frame( seq(1, l-win, by=step) );
names(bins.1k) <- c("BIN_START")
#Make new column which contains bin
bins.1k$BIN_RR <- cut(bins.1k$BIN_START,breaks=levels(factor(rr$BIN_RR)),include.lowest = T,labels=F,right=F)
bins.1k$BIN_RR <- bins.1k$BIN_RR - 1
bins.1k$BIN_RR <- bins.1k$BIN_RR*100000
bins.1k$BIN_RR <- bins.1k$BIN_RR+1
rr <- merge(rr,bins.1k,by="BIN_RR",all=T)

#merge this dataframe with new bins 
rr <- merge(rr,chunks,by.x=c("Chrom","BIN_START"),by.y=c("Chrom.r5","BIN_START.r5"),all.x=T)

#write.table(rr,"Documents/data/pop_gen/recombination_rate_linked_selection/Comeron_tables/recom_all_chrom_r5_and_r6.txt",quote=F,row.names=F)
rr <- read.table("Documents/data/pop_gen/recombination_rate_linked_selection/Comeron_tables/recom_all_chrom_r5_and_r6.txt",head=T)
----- R code -----

######################################################
## EXTRACT ALLELE FREQUENCIES
######################################################

###### Fasta -> vcf ######

## The following represents code for one chromosome arm (2R)
## The same code has to be replicated for each chromosome arm in turn
## This includes fasta to vcf steps and coordinate conversion steps
## Note that snp-sites software is used to convert from fasta to vcf

## Copy filtering scripts (downloaded from DGN website) to folder containing ".seq" files
cp ~/Downloads/masking/* .;
## Filter for identity by descent
perl ibd_mask_seq.pl
## Filter for admixture
perl admixture_mask_seq.pl
## Rename ".seq" file names to ".fas"
for file in *.seq; do awk 'BEGIN{print ">'$file'"}1' $file > $file.fas; done; 
rm *.seq;
mkdir misc; 
mv Table* misc/; 
mv dataslice.pl misc/;
mv ibd* misc/;
mv admixture* misc/; 
## Delete fasta files which are under 20 bytes - these have not made it through the admixture/ibd filtering
find . -name "*.fas" -size -20c -delete
## Concatenate FASTA files from each individual
cat *.fas > 2R.fas;
## Concatenated fastas -> vcf
snp-sites -v -o 2R.vcf 2R.fas
mkdir multiple_alignment_fastas;
mv 2R.fas multiple_alignment_fastas/;

## Snp-sites software does not deal easily with the large number of SNPs in the DPGP3 population 
## see alternative code below for that population
## Same as DGRP, except the chromosomes need to be subdivided further to start with (the sub-vcf can then be concatenated)
cp ~/Downloads/masking/* .;
perl ibd_mask_seq.pl
perl admixture_mask_seq.pl
for file in *.seq; do awk 'BEGIN{print ">'$file'"}1' $file > $file.fas; done; 
rm *.seq;
mkdir misc; 
mv Table* misc/; 
mv dataslice.pl misc/;
mv ibd* misc/;
mv admixture* misc/; 
perl breaker.pl; 
## This extracts line 1, and lines 5002 to 10001 inclusive. 
## Line one contains fasta header, so is important to extract every time, so that snp-sites can work
for file in *fas1k; do sed -n 1,5001p $file > $file.one; done;
for file in *fas1k; do sed -n -e 1p -e 5002,10001p $file > $file.two; done; 
for file in *fas1k; do sed -n -e 1p -e 10002,15001p $file > $file.three; done;
for file in *fas1k; do sed -n -e 1p -e 15002,20001p $file > $file.four; done;
for file in *fas1k; do sed -n -e 1p -e 20002,25001p $file > $file.five; done;
cat *.one > one.fas;
cat *.two > two.fas;
cat *.three > three.fas;
cat *.four > four.fas;
cat *.five > five.fas;
snp-sites -v -o one.vcf one.fas;
snp-sites -v -o two.vcf two.fas;
snp-sites -v -o three.vcf three.fas;
snp-sites -v -o four.vcf four.fas;
snp-sites -v -o five.vcf five.fas;

## Some chromosome arms have > 25000 lines; if so, the following line is added
for file in *fas1k; do sed -n -e 1p -e 25002,30001p $file > $file.six; done;
cat *.six > six.fas;
snp-sites -v -o six.vcf six.fas;

## Make single vcf for each chromosome arm; 
## Move all vcf files to single folder
mv *.vcf ../vcf/vcf_without_reference/;
cd ../vcf/vcf_without_reference/;
#Extract header from the first of them
grep '^#' one.vcf > header.vcf;
#Remove headers from the rest
grep -v '^#' one.vcf > one.body.vcf;
grep -v '^#' two.vcf > two.body.vcf;
grep -v '^#' three.vcf > three.body.vcf;
grep -v '^#' four.vcf > four.body.vcf;
grep -v '^#' five.vcf > five.body.vcf;
#grep -v '^#' six.vcf > six.body.vcf;
#Add the appropriate constant to each vcf > 1
awk 'BEGIN { OFS = "\t" } {$2 = $2 + 5000000; print}' two.body.vcf > two2.body.vcf;
awk 'BEGIN { OFS = "\t" } {$2 = $2 + 10000000; print}' three.body.vcf > three2.body.vcf;
awk 'BEGIN { OFS = "\t" } {$2 = $2 + 15000000; print}' four.body.vcf > four2.body.vcf;
awk 'BEGIN { OFS = "\t" } {$2 = $2 + 20000000; print}' five.body.vcf > five2.body.vcf;
#awk 'BEGIN { OFS = "\t" } {$2 = $2 + 25000000; print}' six.body.vcf > six2.body.vcf;
## Concatenate header + bodies of remaining vcfs in order
cat header.vcf one.body.vcf two2.body.vcf three2.body.vcf four2.body.vcf five2.body.vcf > r5.vcf;
#cat header.vcf one.body.vcf two2.body.vcf three2.body.vcf four2.body.vcf five2.body.vcf six2.body.vcf > r5.vcf;
mkdir r5;
mv r5.vcf r5;
rm *.vcf;

###### Coord r5 (dm3) -> r6 ######

mkdir coord_conversion;
mkdir r6;
mv 2R.vcf r5.vcf;
## Cut out chromosome positions
cut -f1,2 r5.vcf > chrom_pos.txt

----- R code -----
infile_path <- "/Volumes/Time_Machine_Backups/nexus_originals/dpgp3_sequences/2R/vcf/vcf_without_reference/chrom_pos.txt"
outfile_path <- "/Volumes/Time_Machine_Backups/nexus_originals/dpgp3_sequences/2R/vcf/vcf_without_reference/rwandan_X_r5.bed"
coordinate_conversion_function_part1(infile_path,"X",outfile_path)
----- R code -----

## Obtain coordinate-converted files ('hglft_dpgp3_2R.bed') and error file ("hglft_dpgp3_2R.err.txt") from UCSC coordinate conversion website

----- R code -----
original_path <- "/Volumes/Time_Machine_Backups/nexus_originals/dpgp3_sequences/2R/vcf/vcf_without_reference/dpgp3_2R_r5.bed"
converted_path <- "/Volumes/Time_Machine_Backups/nexus_originals/dpgp3_sequences/2R/vcf/vcf_without_reference/hglft_dpgp3_2R.bed"
error_path <- "/Volumes/Time_Machine_Backups/nexus_originals/dpgp3_sequences/2R/vcf/vcf_without_reference/hglft_dpgp3_2R.err.txt"
chrom <- "2R"
outfile_path <- "/Volumes/Time_Machine_Backups/nexus_originals/Rwandan_sequences/dpgp3_2R/vcf/vcf_without_reference/"
coordinate_conversion_function_part2(original_path,converted_path,error_path,"2R",outfile_path)
----- R code -----

## Replace r5 vcf positions with r6 (if there are no erroneous positions)
grep '^#' r5.vcf > r6.vcf && grep -v '^#' r5.vcf | cut -f3- | paste 2Rnew_coords.txt - >> r6.vcf; 

## Replace r5 vcf positions with r6 (while removing 1 'erroneous position' file)
vcftools --vcf r5.vcf --exclude-positions 3Rbadloci.txt --recode --out r5temp;
mv r5temp.recode.vcf r5temp.vcf;
grep '^#' r5temp.vcf > r6.vcf && grep -v '^#' r5temp.vcf | cut -f3- | paste 2Rnew_coords.txt - >> r6.vcf;
rm r5temp*;

## Replace r5 vcf positions with r6 (while removing 2 'erroneous position' files)
vcftools --vcf r5.vcf --exclude-positions Xbadloci.txt --recode --out r5temp;
mv r5temp.recode.vcf r5temp.vcf;
vcftools --vcf r5temp.vcf --exclude-positions Xadditionalbadloci.txt --recode --out r5temp2;
mv r5temp2.recode.vcf r5temp2.vcf;
grep '^#' r5temp2.vcf > r6.vcf && grep -v '^#' r5temp2.vcf | cut -f3- | paste Xnew_coords.txt - >> r6.vcf;
rm r5temp*;

## Each chromosome arm from each population now contains a file, called 'r6.vcf', which has allele frequencies in r6 coordinates
## Modify snp-sites vcf format to 'standard' vcf format
----- R code -----
#Import vcf file of interest
vcf <- read.table("/Volumes/Time_Machine_Backups/nexus_originals/dpgp3_sequences/dgrp_Chr2R/vcf_snpsites/vcf_without_reference/r6.vcf")

#Sanity check
plot(rownames(vcf),vcf$V2)
#Three possible types of acceptable allele
#No missing values
type1 <- c("A","T","G","C")
part1 <- subset(vcf,V5 %in% type1)
part1[part1==1] <- "1/1"
part1[part1==0] <- "0/0"

#Missing value = 2
type2 <- c("A,*","T,*","G,*","C,*")
part2 <- subset(vcf,V5 %in% type2)
part2[part2==2] <- "./."
part2[part2==1] <- "1/1"
part2[part2==0] <- "0/0"
part2$V5 <- ifelse(part2$V5=="A,*","A",ifelse(part2$V5=="T,*","T",ifelse(part2$V5=="C,*","C",ifelse(part2$V5=="G,*","G",NA))))

#Missing value = 1
type3 <- c("*,A","*,T","*,G","*,C")
part3 <- subset(vcf,V5 %in% type3)
part3[part3==2] <- "1/1"
part3[part3==1] <- "./."
part3[part3==0] <- "0/0"
part3$V5 <- ifelse(part3$V5=="*,A","A",ifelse(part3$V5=="*,T","T",ifelse(part3$V5=="*,C","C",ifelse(part3$V5=="*,G","G",NA))))

#Rbind parts 1,2,3
vcf <- rbind(part1,part2,part3)
#Transform position column to numeric
vcf$V2 <- as.numeric(vcf$V2)
vcf$V2 <- format(vcf$V2,scientific=F)
#Order by position column
vcf <- vcf[order(vcf$V2),]
#Replace chromosome column with 1
vcf$V1 <- 1
write.table(vcf,"/Volumes/Time_Machine_Backups/nexus_originals/dgrp_sequences/dpgp3_2R/vcf/vcf_without_reference/body.vcf",sep="\t",row.names = F,quote=F,col.names=F)

rm(vcf)
rm(part1)
rm(part2)
rm(part3)
----- R code -----

grep '^#' r6.vcf > header.vcf; cat header.vcf body.vcf > r6/r6_modified_no_dp_filter.vcf; rm body.vcf; rm header.vcf;

####### Estimate allele frequencies #######

vcftools --vcf /Volumes/Time_Machine_Backups/nexus_originals/dpgp3_sequences/dpgp3_2R/vcf/vcf_without_reference/r6/modified/r6_modified_no_dp_filter.vcf --freq --out ~/Documents/data/pop_gen/polymorphism/snp_based/r6/modified/dpgp3.no.dp.filter.2R.frq;

####### Get depth information at monomorphic sites which are polymorphic in LHm #######

----- R code -----

dpgp3.2L <- read.table("Documents/data/pop_gen/polymorphism/snp_based/r6/modified/dpgp3.no.dp.filter.2L.frq",header = T,row.names = NULL)
names(dpgp3.2L) <- c("Chrom","Pos","N_alleles","N_chrom","A1","A2")
dpgp3.2L$A1_freq <- do.call(rbind,strsplit(as.character(dpgp3.2L$A1),split = ":"))[,2]
dpgp3.2L$A1 <- do.call(rbind,strsplit(as.character(dpgp3.2L$A1),split = ":"))[,1]
dpgp3.2L$A2_freq <- do.call(rbind,strsplit(as.character(dpgp3.2L$A2),split = ":"))[,2]
dpgp3.2L$A2 <- do.call(rbind,strsplit(as.character(dpgp3.2L$A2),split = ":"))[,1]
dpgp3.2L$Chrom <- "2L"

dpgp3.2R <- read.table("Documents/data/pop_gen/polymorphism/snp_based/r6/modified/dpgp3.no.dp.filter.2R.frq",header = T,row.names = NULL)
names(dpgp3.2R) <- c("Chrom","Pos","N_alleles","N_chrom","A1","A2")
dpgp3.2R$A1_freq <- do.call(rbind,strsplit(as.character(dpgp3.2R$A1),split = ":"))[,2]
dpgp3.2R$A1 <- do.call(rbind,strsplit(as.character(dpgp3.2R$A1),split = ":"))[,1]
dpgp3.2R$A2_freq <- do.call(rbind,strsplit(as.character(dpgp3.2R$A2),split = ":"))[,2]
dpgp3.2R$A2 <- do.call(rbind,strsplit(as.character(dpgp3.2R$A2),split = ":"))[,1]
dpgp3.2R$Chrom <- "2R"

dpgp3.3L <- read.table("Documents/data/pop_gen/polymorphism/snp_based/r6/modified/dpgp3.no.dp.filter.3L.frq",header = T,row.names = NULL)
names(dpgp3.3L) <- c("Chrom","Pos","N_alleles","N_chrom","A1","A2")
dpgp3.3L$A1_freq <- do.call(rbind,strsplit(as.character(dpgp3.3L$A1),split = ":"))[,2]
dpgp3.3L$A1 <- do.call(rbind,strsplit(as.character(dpgp3.3L$A1),split = ":"))[,1]
dpgp3.3L$A2_freq <- do.call(rbind,strsplit(as.character(dpgp3.3L$A2),split = ":"))[,2]
dpgp3.3L$A2 <- do.call(rbind,strsplit(as.character(dpgp3.3L$A2),split = ":"))[,1]
dpgp3.3L$Chrom <- "3L"

dpgp3.3R <- read.table("Documents/data/pop_gen/polymorphism/snp_based/r6/modified/dpgp3.no.dp.filter.3R.frq",header = T,row.names = NULL)
names(dpgp3.3R) <- c("Chrom","Pos","N_alleles","N_chrom","A1","A2")
dpgp3.3R$A1_freq <- do.call(rbind,strsplit(as.character(dpgp3.3R$A1),split = ":"))[,2]
dpgp3.3R$A1 <- do.call(rbind,strsplit(as.character(dpgp3.3R$A1),split = ":"))[,1]
dpgp3.3R$A2_freq <- do.call(rbind,strsplit(as.character(dpgp3.3R$A2),split = ":"))[,2]
dpgp3.3R$A2 <- do.call(rbind,strsplit(as.character(dpgp3.3R$A2),split = ":"))[,1]
dpgp3.3R$Chrom <- "3R"

dpgp3.X <- read.table("Documents/data/pop_gen/polymorphism/snp_based/r6/modified/dpgp3.no.dp.filter.X.frq",header = T,row.names = NULL)
names(dpgp3.X) <- c("Chrom","Pos","N_alleles","N_chrom","A1","A2")
dpgp3.X$A1_freq <- do.call(rbind,strsplit(as.character(dpgp3.X$A1),split = ":"))[,2]
dpgp3.X$A1 <- do.call(rbind,strsplit(as.character(dpgp3.X$A1),split = ":"))[,1]
dpgp3.X$A2_freq <- do.call(rbind,strsplit(as.character(dpgp3.X$A2),split = ":"))[,2]
dpgp3.X$A2 <- do.call(rbind,strsplit(as.character(dpgp3.X$A2),split = ":"))[,1]
dpgp3.X$Chrom <- "X"

dpgp3.frq <- rbind(dpgp3.2L,dpgp3.2R,dpgp3.3L,dpgp3.3R,dpgp3.X)
dpgp3.frq$MAF_DPGP3 <- ifelse(dpgp3.frq$A1_freq<dpgp3.frq$A2_freq,dpgp3.frq$A1_freq,dpgp3.frq$A2_freq)
dpgp3.frq$MAF_DPGP3 <- as.numeric(dpgp3.frq$MAF_DPGP3)
#write.table(dpgp3.frq,"Documents/data/pop_gen/polymorphism/snp_based/r6/modified/dpgp3.no.dp.filter.all.frq",row.names=F,quote=F)

GWAS.pos <- read.table("~/Documents/data/GWAS_data/gwas/callrate95_no_outlier/assoc_mixed_model/GWAS_positions.r5.txt")
names(GWAS.pos) <- c("Chrom.r5","Pos.r5","Chrom.r6","Pos.r6")
GWAS.pos$Chrom_plink <- GWAS.pos$Chrom.r6
levels(GWAS.pos$Chrom_plink) <- 1:5
GWAS.pos$Predictor <- paste(GWAS.pos$Chrom_plink,GWAS.pos$Pos.r6,sep="_")

#Import pop freq info and merge with GWAS data
#DPGP3
assoc <- read.table("~/Documents/data/GWAS_data/gwas/callrate95_no_outlier/assoc_mixed_model/mm.assoc",head=T)
dpgp3.frq <- read.table("Documents/data/pop_gen/polymorphism/snp_based/r6/modified/dpgp3.no.dp.filter.all.frq",head=T)
dpgp3.frq$Chrom_plink <- dpgp3.frq$Chrom
levels(dpgp3.frq$Chrom_plink) <- 1:5
dpgp3.frq$Predictor <- paste(dpgp3.frq$Chrom_plink,dpgp3.frq$Pos,sep="_")
tmp <- Reduce(function(...) merge(...,all.x=T,by="Predictor"),list(assoc,dpgp3.frq,GWAS.pos))

#Keep only positions which need depth information + write them to file
GWAS.pos.nodpgp3 <- subset(tmp,is.na(MAF_DPGP3) & !is.na(Chrom.r5) & !is.na(Pos.r5))
GWAS.pos.nodpgp3 <- GWAS.pos.nodpgp3[order(GWAS.pos.nodpgp3$Chrom.r5,GWAS.pos.nodpgp3$Pos.r5),]

write.table(subset(GWAS.pos.nodpgp3,Chrom.r5=="2L")[c("Chrom.r5","Pos.r5")],"/Volumes/Time_Machine_Backups/nexus_originals/dpgp3_sequences/dpgp3_Chr2L/fastas/GWAS_positions_2L_dpgp3.r5.txt",quote=F,row.names=F,col.names=F)
write.table(subset(GWAS.pos.nodpgp3,Chrom.r5=="2R")[c("Chrom.r5","Pos.r5")],"/Volumes/Time_Machine_Backups/nexus_originals/dpgp3_sequences/dpgp3_Chr2R/fastas/GWAS_positions_2R_dpgp3.r5.txt",quote=F,row.names=F,col.names=F)
write.table(subset(GWAS.pos.nodpgp3,Chrom.r5=="3L")[c("Chrom.r5","Pos.r5")],"/Volumes/Time_Machine_Backups/nexus_originals/dpgp3_sequences/dpgp3_Chr3L/fastas/GWAS_positions_3L_dpgp3.r5.txt",quote=F,row.names=F,col.names=F)
write.table(subset(GWAS.pos.nodpgp3,Chrom.r5=="3R")[c("Chrom.r5","Pos.r5")],"/Volumes/Time_Machine_Backups/nexus_originals/dpgp3_sequences/dpgp3_Chr3R/fastas/GWAS_positions_3R_dpgp3.r5.txt",quote=F,row.names=F,col.names=F)
write.table(subset(GWAS.pos.nodpgp3,Chrom.r5=="X")[c("Chrom.r5","Pos.r5")],"/Volumes/Time_Machine_Backups/nexus_originals/dpgp3_sequences/dpgp3_ChrX/fastas/GWAS_positions_X_dpgp3.r5.txt",quote=F,row.names=F,col.names=F)

----- R code -----

## Extract allele frequencies from positions that are polymorphic in LHm but not polymorphic in population of interest
cd /Volumes/Time_Machine_Backups/nexus_originals/dpgp3_sequences/dpgp3_Chr2L/fastas/;
parallel -j+0 --eta --load 40% "awk '$my_awk' GWAS_positions_2L_dpgp3.r5.txt {} > {}.gwas" ::: *.fas;
paste *.gwas > missing_gwas_2L.txt;
rm *.gwas;
cd /Volumes/Time_Machine_Backups/nexus_originals/dpgp3_sequences/dpgp3_Chr2R/fastas/;
parallel -j+0 --eta --load 40% "awk '$my_awk' GWAS_positions_2R_dpgp3.r5.txt {} > {}.gwas" ::: *.fas;
paste *.gwas > missing_gwas_2L.txt;
rm *.gwas;
cd /Volumes/Time_Machine_Backups/nexus_originals/dpgp3_sequences/dpgp3_Chr3L/fastas/;
parallel -j+0 --eta --load 40% "awk '$my_awk' GWAS_positions_3L_dpgp3.r5.txt {} > {}.gwas" ::: *.fas;
paste *.gwas > missing_gwas_2L.txt;
rm *.gwas;
cd /Volumes/Time_Machine_Backups/nexus_originals/dpgp3_sequences/dpgp3_Chr3R/fastas/;
parallel -j+0 --eta --load 40% "awk '$my_awk' GWAS_positions_3R_dpgp3.r5.txt {} > {}.gwas" ::: *.fas;
paste *.gwas > missing_gwas_2L.txt;
rm *.gwas;
cd /Volumes/Time_Machine_Backups/nexus_originals/dpgp3_sequences/dpgp3_ChrX/fastas/;
parallel -j+0 --eta --load 40% "awk '$my_awk' GWAS_positions_X_dpgp3.r5.txt {} > {}.gwas" ::: *.fas;
paste *.gwas > missing_gwas_2L.txt;
rm *.gwas;

----- R code -----
#Get information about missing sites
miss.2L.DPGP3 <- read.table("/Volumes/Time_Machine_Backups/nexus_originals/dpgp3_sequences/dpgp3_Chr2L/fastas/missing_gwas_2L.txt")
miss.2R.DPGP3 <- read.table("/Volumes/Time_Machine_Backups/nexus_originals/dpgp3_sequences/dpgp3_Chr2R/fastas/missing_gwas_2R.txt")
miss.3L.DPGP3 <- read.table("/Volumes/Time_Machine_Backups/nexus_originals/dpgp3_sequences/dpgp3_Chr3L/fastas/missing_gwas_3L.txt")
miss.3R.DPGP3 <- read.table("/Volumes/Time_Machine_Backups/nexus_originals/dpgp3_sequences/dpgp3_Chr3R/fastas/missing_gwas_3R.txt")
miss.X.DPGP3 <- read.table("/Volumes/Time_Machine_Backups/nexus_originals/dpgp3_sequences/dpgp3_ChrX/fastas/missing_gwas_X.txt")
miss.X.DPGP3$V197 <- NA
miss.DPGP3 <- rbind(miss.2L.DPGP3,miss.2R.DPGP3,miss.3L.DPGP3,miss.3R.DPGP3,miss.X.DPGP3)
miss.DPGP3 <- cbind(miss.DPGP3,subset(GWAS.pos.nodpgp3,Chrom.r5 %in% c("2L","2R","3L","3R","X"))[c("Chrom.r5","Pos.r5")])

#Summary stats for missing positions
miss.DPGP3$N_chrom <- ifelse(miss.DPGP3$Chrom.r5=="X",392-(rowCounts(miss.DPGP3=="N",na.rm=T)*2),394-(rowCounts(miss.DPGP3=="N",na.rm=T)*2))
miss.DPGP3$Freq_A <- rowCounts(miss.DPGP3=="A",na.rm=T)
miss.DPGP3$Freq_T <- rowCounts(miss.DPGP3=="T",na.rm=T)
miss.DPGP3$Freq_C <- rowCounts(miss.DPGP3=="C",na.rm=T)
miss.DPGP3$Freq_G <- rowCounts(miss.DPGP3=="G",na.rm=T)
miss.DPGP3$Type <- factor(ifelse(rowCounts(miss.DPGP3[201:204]==0,na.rm=T)<3,"tri",ifelse(rowCounts(miss.DPGP3[201:204]==0,na.rm=T)>3,"miss","mono")))
#Make columns to merge 
miss.DPGP3$A1 <- with(miss.DPGP3,ifelse(Freq_A>0 & Type=="mono","A",ifelse(Freq_T>0 & Type=="mono","T",ifelse(Freq_C>0 & Type=="mono","C",ifelse(Freq_G>0 & Type=="mono","G",NA)))))
miss.DPGP3$A2 <- ifelse(miss.DPGP3$A1 %in% c("A","T","C","G"),0,NA)
miss.DPGP3$N_alleles <- ifelse(miss.DPGP3$Type=="mono",1,ifelse(miss.DPGP3$Type=="miss",0,3))
miss.DPGP3$A1_freq <- ifelse(miss.DPGP3$Type=="mono",0,NA)
miss.DPGP3$A2_freq <- NA
miss.DPGP3$MAF_DPGP3 <- ifelse(miss.DPGP3$Type=="mono",0,NA)
miss.DPGP3 <- merge(miss.DPGP3,GWAS.pos,by=c("Chrom.r5","Pos.r5"),all.x=T)
names(miss.DPGP3)[212:213] <- c("Chrom","Pos")
dpgp3.frq <- rbind(dpgp3.frq,miss.DPGP3[names(dpgp3.frq)])
dpgp3.frq <- dpgp3.frq[order(dpgp3.frq$Chrom,dpgp3.frq$Pos),]
#write.table(dpgp3.frq,"Documents/data/pop_gen/polymorphism/snp_based/r6/modified/dpgp3.no.dp.filter.plus.mono.all.frq",quote=F,row.names=F)
----- R code -----

